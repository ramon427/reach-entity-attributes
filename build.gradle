plugins {
    id "fabric-loom" version "1.6-SNAPSHOT"
    id "net.nemerosa.versioning" version "3.0.0"
    id "maven-publish"
    id "signing"
}

group = maven_group
version = mod_version

final isReleaseVersion = !version.endsWith("-SNAPSHOT")

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    implementation("com.google.code.findbugs:jsr305:$jsr305_version") {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

loom {
    mixin {
        defaultRefmapName.set("refmap.reach-entity-attributes.json")
    }
    runs {
        configureEach {
            property "mixin.debug", "true"
            property "mixin.debug.export.decompile", "false"
            property "mixin.debug.verbose", "true"
            property "mixin.dumpTargetOnFailure", "true"
            property "mixin.checks", "true"
            property "mixin.hotSwap", "true"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            afterEvaluate {
                artifact remapJar
                artifact(sourcesJar.archiveFile) {
                    classifier = "sources"
                    builtBy remapSourcesJar
                }
            }
        }
    }
    repositories {
        maven {
            url = "https://maven.jamieswhiteshirt.com/libs-" + (isReleaseVersion ? "release" : "snapshot")
            credentials {
                username = project.properties.jwsMavenUser
                password = project.properties.jwsMavenPassword
            }
        }
    }
}

signing {
    required = isReleaseVersion
    sign publishing.publications.mavenJava
}
